id: playground
namespace: phillycrime
description: |
  Flow to grab philadelphia playground data from open data philly website once.

 
variables:
  url: 'https://opendata.arcgis.com/datasets/899c807e205244278b3f39421be8489c_0.geojson'
  output_name: "philly_playground.geojson"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/philly_playground.csv"
  table: "{{kv('GCP_DATASET')}}.philly_playground"
  data: "{{outputs.extract.outputFiles['philly_playground.geojson']}}"


tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.output_name)}}"

    # Task to download the playground csv file 
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.geojson"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - curl -s -o {{render(vars.output_name)}} -L '{{render(vars.url)}}'

    # Extract certain cols 
  - id: transform_data
    type: io.kestra.plugin.scripts.python.Script
    outputFiles:
      - 'philly_playground.csv'
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    warningOnStdErr: false
    beforeCommands:
    - pip install pandas geojson
    script: | 
      import pandas as pd
      import geojson
      import requests

      def get_country(lat, lon):
        url = f'https://nominatim.openstreetmap.org//reverse?lat={lat}&lon={lon}&format=json&addressdetails=1'
        try:
          result = requests.get(url=url,headers = {'User-Agent':'me'})
          result_json = result.json()
          return result_json['address']['postcode']
        except:
          return None  

      playground = []

      with open('{{render(vars.data)}}') as f:
          gj = geojson.load(f)
      
      for loc in gj['features']:
          objectid = loc['properties']['OBJECTID']
          park_name = loc['properties']['PARK_NAME']
          age_range = loc['properties']['OBJECTID']
          lng = loc['geometry']['coordinates'][0]
          lat = loc['geometry']['coordinates'][1]

          zip = get_country(lat, lng)
          playground.append([objectid, park_name, age_range, lng, lat, zip])

      # Convert to a dataframe
      cols = ['objectid', 'park_name', 'age_range', 'lng', 'lat', 'zip']
      df = pd.DataFrame(playground, columns=cols)

      df['zip'] = df['zip'].astype('Int64')    
      
      df.to_csv('philly_playground.csv', index=False)

  - id: upload_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{outputs.transform_data.outputFiles['philly_playground.csv']}}"
    to: "{{render(vars.gcs_file)}}"

   # Create the BQ table that will hold final data
  - id: bq_playground
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          LOAD DATA OVERWRITE phillycrime.philly_crime_db.playground
          (
            objectid INTEGER OPTIONS(description='Unique identifier for row from the source')
            ,park_name STRING OPTIONS(description='String representing the playground name')
            ,age_range STRING OPTIONS(description='String representing age category of playground')          
            ,lng BIGNUMERIC OPTIONS(description='Represents the latitude coordinate of playground')
            ,lat BIGNUMERIC OPTIONS(description='Represents the longitude coordinate of playground ')
            ,zip INTEGER OPTIONS(description='zipcode of the park')  
          )
          FROM FILES (
            skip_leading_rows=1,
            format = 'CSV',
            uris = ['{{render(vars.gcs_file)}}']);


  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

    # Delete bucket after use 
  - id: delete
    type: io.kestra.plugin.gcp.gcs.Delete
    uri: gs://{{kv('GCP_BUCKET_NAME')}}/{{render(vars.output_name)}}

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"



